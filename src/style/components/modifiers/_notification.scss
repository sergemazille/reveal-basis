.notification {

    // change default core attributes when there is a modifier
    &[class*='--'] {
        display: block;
        position: relative;
    }

    // position
    @mixin position($position: 'left') {

        &.--width-auto {
            // positioning
            align-self: flex-start;
            @if $position == 'right' { align-self: flex-end; } // override default
        }

        #{$position}: calc(-100% - #{$notifications-container-padding});

        &.is-visible {
            #{$position}: 0;
        }
    }

    // transitions
    // ===========

    // slide transition
    @mixin slide($position: 'left') {

        #{$position}: calc(-100% - #{$notifications-container-padding});

        transition: #{$position} $notification-transition-duration $notification-transition-timing-function,
        visibility 0s $notification-transition-duration; // visibility toggle is delayed after element's transition is ended
        will-change: #{$position}, visibility;

        &.is-visible {
            #{$position}: 0;
            transition: #{$position} $notification-transition-duration $notification-transition-timing-function;
            will-change: #{$position};
        }
    }

    &.--position-left {
        @include position('left');
    }

    &.--position-right {
        @include position('right');
    }

    &.--transition-slide {

        // if position is not specified or is left
        &.--position-left, &:not([class*='--position']) {
            @include slide('left');
        }

        // else for positioning on the right hand side
        &.--position-right {
            @include slide('right');
        }
    }

    &.--transition-fade {
        opacity: 0;

        transition: opacity $notification-transition-duration $notification-transition-timing-function,
        visibility 0s $notification-transition-duration; // visibility toggle is delayed after element's transition is ended
        will-change: opacity, visibility;

        &.is-visible {

            opacity: 1;
            transition: opacity $notification-transition-duration $notification-transition-timing-function;
            will-change: opacity;
        }
    }

    &.--width-auto {
        align-self: flex-start;
    }
}
